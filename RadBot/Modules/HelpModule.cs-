using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using Discord.Commands.Builders;
using RadLibrary;
using RadLibrary.Configuration;

namespace RadBot.Modules
{
    [RequireUserPermission(GuildPermission.SendMessages)]
    [Name("Random")]
    public class HelpModule : ModuleBase<SocketCommandContext>
    {
        private CommandService _service;
        private AppConfiguration _config;
        
        public HelpModule(CommandService service, AppConfiguration config)
        {
            _service = service;
            _config = config;
        }

        [Command("help")]
        [Summary("Prints help message.")]
        public async Task HelpAsync()
        {
            var embedBuilder = Helper.GetBuilder();
            
            embedBuilder.Title = "Available commands";

            var randomField = new EmbedFieldBuilder
            {
                Name = "Random",
                IsInline = true
            };

            foreach (var module in _service.Modules)
            {
                var sb = new StringBuilder();

                foreach (var command in module.Commands)
                {
                    var aliases = command.Aliases.Aggregate((current, item) => current + ", " + item);
                    var s = sb.ToString();
                    
                    if (!s.Contains(aliases))
                        sb.AppendLine(_config["bulletSymbol"] + " " + aliases);
                }

                if (string.IsNullOrEmpty(module.Name) || string.IsNullOrEmpty(module.Group))
                    randomField.Value += sb.ToString();
                else
                    embedBuilder.AddField(new EmbedFieldBuilder
                    {
                        Name = string.IsNullOrEmpty(module.Group) ? module.Name : "Module: " + module.Group,
                        Value = sb.ToString(),
                        IsInline = true
                    });
            }

            embedBuilder.AddField(randomField);

            await ReplyAsync("", false, embedBuilder.Build());
        }

        [Command("help")]
        [Summary("Prints help message about specified command.")]
        public async Task HelpAsync([Remainder] [Summary("The command")] string command)
        {
            var found = _service.Search(command);

            if (!found.IsSuccess)
            {
                await ReplyAsync($"Can't find '{command}' command");
                return;
            }

            foreach (var cmd in found.Commands)
            {
                var embedBuilder = Helper.GetBuilder();

                embedBuilder.Title = $"Help for '{found.Text}' command";

                //embedBuilder.AddField("Description:", SplitToLines(cmd.Command.Summary, 24), true);
                embedBuilder.AddField("Description:", cmd.Command.Summary, true);

                var paramsSb = new StringBuilder();
            
                foreach (var parameterInfo in cmd.Command.Parameters)
                {
                    paramsSb.AppendLine(_config["bulletSymbol"] + " " + parameterInfo.Name + ": " + parameterInfo.Summary + " " + (parameterInfo.IsOptional ? "(optional)" : "(required)") + (parameterInfo.IsRemainder ? " (remainder)" : ""));
                }
            
                embedBuilder.AddField("Parameters (in order):", paramsSb.Length == 0 ? _config["bulletSymbol"] + " no" : paramsSb.ToString(), true);

                var preconditionsSb = new StringBuilder();
                
                foreach (var attribute in GetAllPermissions(cmd.Command))
                {
                    preconditionsSb.AppendLine(_config["bulletSymbol"] + " " + attribute.GuildPermission);
                }

                var s = preconditionsSb.ToString();
                
                embedBuilder.AddField("User permissions:", string.IsNullOrEmpty(s) ? _config["bulletSymbol"] + " no" : s);
                
                await ReplyAsync("", false, embedBuilder.Build());
            }
        }

        private static HashSet<RequireUserPermissionAttribute> GetAllPermissions(CommandInfo cmd)
        {
            var all = cmd.Preconditions.Where(x => x is RequireUserPermissionAttribute).Cast<RequireUserPermissionAttribute>();
            
            return all.Concat(RecursivePermissions(cmd.Module)).ToHashSet();
        }

        private static IEnumerable<RequireUserPermissionAttribute> RecursivePermissions(ModuleInfo module)
        {
            var all = module.Preconditions.Where(x => x is RequireUserPermissionAttribute).Cast<RequireUserPermissionAttribute>();

            return module.Parent != null ? all.Concat(RecursivePermissions(module.Parent)) : all;
        }

        public static string SplitToLines(string str, int n)
        {
            return Regex.Replace(str, ".{"+n+"}(?!$)", "$0\n");
        }
    }
}