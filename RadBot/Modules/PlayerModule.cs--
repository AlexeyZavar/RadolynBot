#region

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Discord.Audio;
using Discord.Commands;
using Discord.WebSocket;
using NYoutubeDL;
using RadLibrary;
using RadLibrary.Configuration;
using RadLibrary.Logging;

#endregion

namespace RadBot.Modules
{
    [Name("Player")]
    [Group("player")]
    public class PlayerModule : ModuleBase<SocketCommandContext>
    {
        // todo: save
        // private readonly Dictionary<SocketGuild, GuildMusicConfiguration> _configurations = new Dictionary<SocketGuild, GuildMusicConfiguration>();
        private readonly AppConfiguration _config;

        public PlayerModule(AppConfiguration config)
        {
            _config = config;
        }

        [Command("join", RunMode = RunMode.Async)]
        [Summary("Joins in current voice channel.")]
        public async Task JoinAsync()
        {
            var user = Context.Guild.GetUser(Context.User.Id);

            if (user.VoiceChannel == null)
            {
                await ReplyAsync(user.Mention + ", you're not in voice channel.");
                return;
            }

            if (Context.Guild.GetUser(Context.Client.CurrentUser.Id).VoiceChannel != null)
            {
                await ReplyAsync(user.Mention + ", I'm already in the voice channel.");
                return;
            }

            var audioClient = await user.VoiceChannel.ConnectAsync();

            if (audioClient == null)
            {
                await ReplyAsync("Something went wrong.");
            }

            /*
            var stream = audioClient.CreatePCMStream(AudioApplication.Mixed);
            var joinSound = CreateStream(Path.GetFullPath(Path.Combine("Assets", "join.mp3")));

            await joinSound.StandardOutput.BaseStream.CopyToAsync(stream);
            
            await stream.FlushAsync();
            */
        }

        [Command("play", RunMode = RunMode.Async)]
        [Summary("Joins in current voice channel.")]
        public async Task PlayAsync([Remainder] [Summary("The url.")] string url)
        {
            var audioClient = Context.Guild.AudioClient;

            if (audioClient == null)
            {
                await ReplyAsync("I'm not in the voice channel.");
                return;
            }

            var stream = audioClient.CreatePCMStream(AudioApplication.Music);

            var dl = Process.Start(new ProcessStartInfo
            {
                FileName = _config["youtube-dl"],
                Arguments = "-o - " + url,
                RedirectStandardOutput = true
            });
            
            var ffmpeg = Process.Start(new ProcessStartInfo
            {
                FileName = "ffmpeg",
                Arguments = "-i - ",
                RedirectStandardInput = true
            });

            await dl.StandardOutput.BaseStream.CopyToAsync(ffmpeg.StandardInput.BaseStream);
        }

        [Command("leave", RunMode = RunMode.Async)]
        [Alias("disconnect", "dc")]
        [Summary("Leaves from channel and cleans queue.")]
        public async Task LeaveAsync()
        {
            var user = Context.Guild.GetUser(Context.Client.CurrentUser.Id);

            if (user.VoiceChannel == null) await ReplyAsync("I'm not in the voice channel.");

            await Context.Guild.AudioClient.StopAsync();
        }
    }
}